import spark.implicits
spark.sql("show tables").show()
import spark.implicits._
spark.sql("show tables").show()
import spark.implicits._
spark.sql("show tables").show()
spark.sql("select * from purchases").show()
val purch = spark.sql("select * from purchases")
purch.show(20)
val purchOver15 = purch.
val purchOverFifteen = purch.filter("purchase_id > 15")
val purchOver15 = purch.
val purchOverFifteen = purch.filter("purchase_id > 15")
val purchOver15 = purch.val purchOverFifteen = purch.filter("purchase_id > 15")
val purchOver15 = purch val purchOverFifteen = purch.filter("purchase_id > 15")
val purchOverFifteen = purch.filter("purchase_id > 15")
purchOverFifteen.show(20)
val val purchWithMonth = purchOverFifteen.select("*").withColumn("Month",lit("Nov"))
val purchWithMonth = purchOverFifteen.select("*").withColumn("Month",lit("Nov"))
purchWithMonth.createOrReplaceTempView("purchWithMonth")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy")
val buyerSummary = purchWithBuyerNum.groupBy("buyer").agg(count("*"))
val uniq = spark.sql("select id, year, noc from athlete_events group by id,year,noc")
uniq.show()
val topSummer = spark.sql("select year, count(noc) as yearCountfrom uniq group by year order by year")  
topSummer.show()
val topSummer = spark.sql("select year, count(noc) as Count from uniq group by year order by Count")  
topSummer
val topSummer = spark.sql("select year, count(noc) as Count from uniq group by year,noc order by Count")  
topSummer.show()
val topSummer = spark.sql("select year, count(noc)  from uniq group by year order by count(noc) desc limit 5")  
topSummer.show()
uniq.show()
val topSummer = spark.sql("select year, count(noc) as count1 from uniq group by year order by count(noc) desc limit 5")  
val topSummer = spark.sql("select year, noc from uniq")  
topSummer.show()
val topyear = uniq.groupBy("year").agg(count("noc"))
topyear.show()
topyear2 = spark.sql("select * from  topyear order by count(noc) desc limit 5")
val topyear2 = spark.sql("select * from  topyear order by count(noc) desc limit 5")
val topyear2 = topyear.orderBy("count(noc)")
topyear2.show()
val topyear3 = topyear.orderBy(desc("count(noc)")).show(5)
spark.implicits._
spark.implicits.
_
spark.implicits._
import spark.implicits._
spark.sql("show tables").show()
spark.sql("select * from purchases").show(20)
val purch = spark.sql("select * from purchases")
purch.show()
val purchOverFifteen = purch.filter("purcase_id > 15")
val purchOverFifteen = purch.filter("purchase_id > 15")
purchOverFifteen.show()
val purchWithMonth = purchOverFifteen.select("*").withColumn("Month, lit("Nov"))
purchWithMonth.show()
val purchWithMonth = purchOverFifteen.select("*").withColumn("Month", lit("Nov"))
purchWithColumn.show()
purchWithMonth.show()
purch.show()
spark.sql("show tables")
spark.sql("show tables").show()
val purch = spark.sql("select * from purchases")
val purchOverFifteen = purch.filter("purchase_id >15")
purchOverFifteen.show()
val purchWithMonth = purchOverFifteen.select(*).withColumn("Month",lit("NOV"))
val purchWithMonth = purchOverFifteen.select("*").withColumn("Month",lit("NOV"))
purchWithMonth.show()
purchWithMonth.createOrReplaceTempView("purchWithMonth")
val purhWithBuyerNum = spark.sql("select b.buyer_num, p.* from purchWithMonth as p join buyers as b on b.buyer_ 
val purhWithBuyerNum = spark.sql("select b.buyer_num, p.* from purchWithMonth as p join buyers as b on b.buyer_name=p.buyer") 
purchWithBuyerName.show()
val purhWithBuyerNum = spark.sql("select buyers.buyer_num, purchWithMonth.* from purchWithMonth join buyers  on buyers.buyer_name=purchWithMonth.buyer") 
purchWithBuyerName.show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buyer")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
purchWithMonth.show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buyer_name")
purchWithBuyerName.show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join  buyers on purchWithMonth.buyer = buyers.buyer_name")
purchWithBuyerName.show()
spark.sql(select * from buyers").show()
spark.sql("select * from buyers").show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join  buyers on purchWithMonth.buyer = buyers.buyer_name")
spark.sql("select * from purchWithMonth").show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buyer_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buy
er_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers  on purchWithMonth.buyer = buyers.buyer_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.buyer, buyers.buyer_num from purchWithMonth join buyers  on purchWithMonth.buyer = buyers.buyer_name")
purchWithBuyerName.show()
val purchWithBuyerNum = spark.sql("select purchWithMonth.buyer, buyers.buyer_num from purchWithMonth join      buyers  on purchWithMonth.buyer = buyers.buyer_name")
val purchWithBuyerName = spark.sql(
"select purchWithMonth.*,buyers.buyer_num from purchWithMonth join buyers on 
val purchWithBuyerName = spark.sql(
"select purchWithMonth.*,buyers.buyer_num from purchWithMonth join buyers on purchWithMont.buyer = buyers.buyer_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.buyer, buyers.buyer_num from purchWithMonth join      buyers  on purchWithMonth.buyer = buyers.buyer_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join      buyers  on purchWithMonth.buyer = buyers.buyer_name")
val buyerSummary = purchWithBuyerNum.groupBy("buyer").agg(count("*"))
val buyers = spark.sql("select * from buyers")
val purchWithBuyerAgain = purchWithMonth.join(buyers, purchWithMonth.col("buyer") === buyers.col("buyer_name"), "inner")
purchWithBuyerAgain.show()
buyerSummary.show()
purch.show()
val purch =spark.sql("select * from purchases")
val purchOverFifteen = purch.filter("purchase_id >15")
purchOverFifteen.show()
import spark.implicits._
val purch = spark.sql("select * from purchases")
purch.show()
purchOverFifteen = purch.filter("purchase_id >15")
val purchOverFifteen = purch.filter("purchase_id >15")
val purchWithMonth = purchOverFifteen.select("*").withColumn("Month", lit("NOV"))
purchWithMonth.show()
purhWithMonth.createOrReplaceTempView("purchWithMonth")
spark.sql.purhWithMonth.createOrReplaceTempView("purchWithMonth")
Spark.SQL.purhWithMonth.createOrReplaceTempView("purchWithMonth")
purhWithMonth.createOrReplaceTempView("purchWithMonth")
purchWithMonth.createOrReplaceTempView("purchWithMonth")
val purchWithBuyerName = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buyer_name")
val purchWithBuyerNum = spark.sql("select purchWithMonth.*, buyers.buyer_num from purchWithMonth join buyers on purchWithMonth.buyer = buyers.buyer_name")
val buyerSummary = purchWithBuyerNum.groupBy("buyer").agg(count("*"))
val buyers = spark.sql("select * from buyers")
val purchWithBuyerAgain = purchWithMonth.join(buyers, purchWithMonth.col("buyer") === buyers.col("buyer_name")
)
purchWithBuyerAgain.show()
purchWithBuyerNum.show()
val purchWithBuyerAgain = purchWithMonth.join(buyers, purchWithMonth.col("buyer") === buyers.col("buyer_name"),"inner")
purchWithBuyerNum.show()
val purchAgain = purchWithMonth.join(buyers, purchWithMonth("buyer")===buyers("buyer_name"), "inner")
purchAgain.show()
import spark.implicits._
val purc = spark.sql("select * from purchases")
spark.sql("show tables").show()
purch.show()
val purch = spark.sql("select * from purchases")
val buyers = spark.sql("select * from buyers")
buyers.groupBy("buyer").count().filter("buyer > 1").show()
buyers.groupBy("buyer_num").count().filter("buyer_num > 1").show()
buyers.groupBy("buyer_name").count().withColumnRenamed("count" , "n").filter("n >0").orderBy("buyer_name")
buyers.groupBy("buyer_name").count().withColumnRenamed("count" , "n").filter("n >0").orderBy("buyer_name").show()
buyers.groupBy("buyer_name").count().withColumnRenamed("count" , "n").filter("n >0").orderBy(asc(("buyer_name")).show()
)
buyers.groupBy("buyer_name").count().withColumnRenamed("count" , "n").filter("n >0").orderBy(asc("buyer_name")).show()
purch.groupBy("buyer").count().withColumnRenamed("count" , "n").filter("n >0").orderBy(asc("buyer")).show()
purch.groupBy("buyer").count().withColumnRenamed("count" , "n").filter("n >0").orderBy(asc("n")).show()
purch.(purch.head(5), purch.tail(5):_*).show()
purch.select(purch.head(5), purch.tail(5):_*).show()
purch.select(columnNames.head(5), columnNames.tail(5):_*).show()
purch.select(columnNames.head(5), columnNames.tail(5): _*).show()
purch.select(columnNames.head(5): _*).show()
purch.select(columnNames.head(): _*).show()
purch.select(columnNames : _*).show()
purch.select(colNames : _*).show()
val col = purch.select(colNames:_*)
val col = purch.select(columnNames:_*)
col.show()
import org.apache.spark.rdd.PairRDDFunctions
purch.show()
val grouped = purch.agg($"buyer" , "purchase_id" -> "count", $"item1" -> "sum" , $"item2" -> "sum")
purch.select("buyer",count("item"))
purch.select("buyer","item1")
purch.select("buyer","item1").show()
purch.select(expr("buyer as buyerName"),"item")
purch.select(expr("buyer as buyerName","item")).show()
purch.select(expr("buyer as buyerName")).show()
purch.selectExpr("*").show()
purch.select("*").show()
purch.select("*").groupBy("purchase_id").withColumnRenamed("buyer", "names").count().withColumnRenamed("count" ,"n").orderBy(asc("n")).show()
purch.select("*").groupBy("purchase_id").count().withColumnRenamed("count" ,"n").orderBy(asc("n")).show()
purch.select("buyer").groupBy("purchase_id").count().withColumnRenamed("count" ,"n").orderBy(asc("n")).show()
purch.groupBy("purchase_id").count().withColumnRenamed("count" ,"n").orderBy(asc("n")).select("*").show()
purch.select(distinct("buyer")).show()
purch.select("buyer").distinct().show()
purch.groupBy("purchase_id").count().withColumnRenamed("count" ,"n").withColumnRenamed("buyer","names").orderBy(asc("n")).select("*").show()
purch.select("*").groupBy("buyer").count("buyer_id").sum("item1").sum("item2").sum("item3").orderBy("count").show()
purch.select("*").groupBy("buyer").count().sum("item1").sum("item2").sum("item3").orderBy("count").show()
purch.select("*").groupBy("buyer").count().sum("item1").orderBy("count").show()
purch.sum("item1").show()
import org.apache.spark.sql.functions._
purch.sum("item1").show()
purch.select("*").groupBy("buyer").count().agg(sum("item1")).show()
purch.agg(sum("item1")).show()
purch.groupBy("buyer").count().agg(sum("item1")).show()
purch.select("*").agg(sum("item1")).show()
purch.groupBy("buyer").agg(sum("item1")).show()
purch.select("*").groupBy("buyer").agg(sum("item1")).show()
purch.select("*").groupBy("buyer").agg(sum("item1")).agg("item2").show()
purch.select("*").groupBy("buyer").sum("item1").show()
val join1 = purch.join(buyers,purch.col("buyer")===buyers.col("buyer_name"),"inner").
)
val join1 = purch.join(buyers,purch.col("buyer")===buyers.col("buyer_name"),"inner")
join.show()
join1.show()
val join2 = purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("buyer_id>3").groupBy("buyer").sum("item1")
val join2 = purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("buyer_id>3")
val join2 = purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").filter("buyer_id>3")
val join2 = purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner")
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").groupBy("buyer").count().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("purchase_id>3").groupBy("buyer").count().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("purchase_id>3").groupBy("buyer_num").coun().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("purchase_id>3").groupBy("buyer_name").coun().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("buyer_num>").groupBy("buye").coun().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("buyer_num>").groupBy("buyer").coun().show()
purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner").where("buyer_num>").groupBy("buyer").count().show()
val join3 = purch.join(buyers, purch.col("buyer")===buyers.col("buyer_name"),"inner")
join3.select("*").where("buyer_num>1").groupBy("buyer").sum("item1").show()
join3.select("*").where("buyer_num>1").groupBy("buyer").sum("item1").sum("item2").show()
val a1= join1.groupBy("buyer").agg(sum("item1")).select($"purchase_id"),$"buyer_num")
val a1= join1.groupBy("buyer").agg(sum("item1")).select($"purchase_id as id", $"buyer_num")
val a1= join1.groupBy("buyer").agg(sum("item1")).select($"purchase_id", $"buyer_num")
val a1= join1.groupBy("buyer").agg(sum("item1")).select($"purchase_id", $"buyer_num","sum")
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1").select("purchase_id", "buyer_num","sum1")
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1").select("*")
a1.show()
val a1= join1.groupBy("buyer").agg(sum("item1").agg(sum("item2")as "sum2").select("*")
)
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1").agg(sum("item2")as "sum2").select("*")
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2").select("*")
a1.show()
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2",sum("item3" as "sum3",count("buyer_name").select("*")
)
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2",sum("item3" as "sum3"),count("buyer_name" as "count")).select("*")
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2",sum("item3" as "sum3"),count("buyer_name" as "count1")).select("*")
val a1= join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2",sum("item3" as "sum3"),count("buyer_name")).select("*")
 join1.groupBy("buyer").agg(sum("item1")as "sum1",sum("item2")as "sum2",sum("item3") as "sum3",count("buyer_name")as "count1").select("*").show()
spark.sql("show tables"),show()
spark.sql("show tables").show()
import spark.implicits._
spark.sql("show tables").show()
spark.sql("select * from course_offerings").show(10)
val coursCount=spark.sql("select * from course-offerings")
val coursCount=spark.sql("select * from course_offerings")
val count= courseCount.agg(count("*"))
courseCount.show()
val count= coursCount.agg(count("*"))
val count= coursCount.count("*")
val count= coursCount.groupBy("uuid").count()
count.show()
println(count)
count1=coursCount.count("*")
val count1=coursCount.count("*")
val c=spark.sql("select count(*) from course_offerings") 
val c=spark.sql("select count(uuit) from course_offerings") 
val c=spark.sql("select count(uuid) from course_offerings") 
println(c)
val c1=spark.sql("select count(*) from course_offerings") 
println(c1)
val c2=spark.sql("select * from course_offerings").count() 
val offerings= spark.sql("select * from course_offerings")
val namesWithCount= offering.groupBy("name").count()
val namesWithCount= offerings.groupBy("name").count()
namesWithCount.show(10)
val offeringCountSorted=namesWithCount.order("name")
val offeringCountSorted=namesWithCount.orderBy("name")
offeringCountSorted.show()
va offeringsCountRenamed= offeringCount.withColumnRenamed("count" , "offeringsCount")
val offeringsCountRenamed= offeringCount.withColumnRenamed("count" , "offeringsCount")
val offeringsCountRenamed= offeringCountSorted.withColumnRenamed("count" , "offeringsCount")
offeringsCountRenaed.show()
offeringsCountRenamed.show()
val countRenamedAndOrdered = offeringsCountRenamed.orderBy("offeringsCount")
countRenamedAndOrdered.show()
